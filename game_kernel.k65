
data TestSine {
	align 256
	for x=0..255 eval [ p = x/256*5, (sin(p*2*pi)*0.5+0.5)*254+1 ]
}

data TestSine2 {
	align 256
	for x=0..255 eval [ p = x/256*7, (sin(p*2*pi)*0.5+0.5)*156+1 ]
}

data sprite {
	align 256
	// image <file> <x0> <y0> <byte> <repeat> - gather bits from image
	//	<file>		- file name without ".bmp" extension
	//	<x0> <y0>	- first pixel to scan
	//	<byte>		- scanning mode for each single byte starting with MSB (count+direction)
	//	<repeat>	- scanning mode for consecutive bytes (count+direction)

	image "gfx/sprites"  0 16 8> 16v inv	// start at pixel (0,16), each byte is 8 bits to the right, repeat 16 times going up
	image "gfx/sprites" 10 16 8> 16v inv	// do the same from (10,16)
	image "gfx/sprites" 20 16 8> 16v inv	// and again starting at (20,16)
	image "gfx/sprites" 30 16 8> 16v inv	// do the same from (30,16)
	image "gfx/sprites" 40 16 8> 16v inv	// and again starting at (40,16)
	image "gfx/sprites" 50 16 8> 16v inv	// and again starting at (50,16)
}
 
data SkyScraper0 { nocross	?	image "gfx/skyscraper"  3 [MISSILE_COUNT-4-1] 8< [MISSILE_COUNT-4]^	}
data SkyScraper1 { nocross	?	image "gfx/skyscraper"  4 [MISSILE_COUNT-4-1] 8> [MISSILE_COUNT-4]^	}
data SkyScraper2 { nocross	?	image "gfx/skyscraper" 19 [MISSILE_COUNT-4-1] 8< [MISSILE_COUNT-4]^	}
data SkyColors {
	nocross
	?
	//for x=0..40 eval [ x|2 ]
	//0x9f 0x9f 0x9f 0x0c 0xfc 0x3e 0x38 0x46 0x44 0x50 0x60 0x70 0xa0
	0x9F 0x0F 0x2F 0x48 0x42 0x40 0x60 0x80 0xA0 0xA0 0xC0 0xC0 0xC0 0xD0 0xC0 0xD0 0xD0 0xD0 0xB0 0xD0 0xB0 0xB0 0xD0 0xB0
	0xD0 0xD0 0xB0 0xD0 0xD0 0xD0 0xB0 0xD0
	0xD0 0xD0 0xD0 0xB0 0xD0 0xD0 0xD0 0xD0 0xD0
}

data PlayCol0 {
	0x6E 0x6E
	0x6C 0x6C
	0x6A 0x6A
	0x68 0x68
	0x66 0x66
	0x64 0x64
	0x62 0x62
	0x60 0x60
}

data PlayCol1 {
	0xDE 0xDE
	0xDC 0xDC
	0xDA 0xDA
	0xD8 0xD8
	0xD6 0xD6
	0xD4 0xD4 0xD4
	0xD2 0xD2 0xD2
}

data ImmShake {
	0 1 2 1
	0 [-1] [-2] [-1]
}

func game_kernel {
	
	infoscroll=a=0
	P1X=a=2
	P2X=a=0xFC
	P1Frame=a=44
	P2Frame=a=44
	Player1Energy_W=Player2Energy_W=a=0
	songpos_seq=a=0
	songpos_step=a=0
	songpos_tick=a=0

	
	{
	sync1
		far song_player
		a=Player1Energy_R a?176 >= { x=1 return }
		a=Player2Energy_R a?176 >= { x=0 return }
		a=swchb a&0x01 == { x=2 return }
		anim++
		x=0	player_input
		x=1 player_input
		far kernel_terror_animate

		// move A
		x=[MISSILE_COUNT-1] {
			ShotVelA_W,x=a=ShotVelA_R-1,x
			y=a=ShotPosA-1,x
			!={
				c- a+ShotVelA_R,x
				y=a
				a>>>			// 0xFF + 1		->	1 00000000		BAD
								// 0x00 + 1		->	0 00000001
								// 0x00 + 0xFF	->	0 11111111		BAD
								// 0xFF + 0xFF	->	1 11111110
				a^ShotVelA_R,x	// MSB	->	0:good	1:bad
				<0{ y=0 }
			}
			ShotPosA,x=y
			x--
		}!=

	sync2

		// move B
		x=0{
			ShotVelB_W,x=a=ShotVelB_R+1,x
			y=a=ShotPosB+1,x
			!={
				c- a+ShotVelB_R,x
				y=a
				a>>>			// 0xFF + 1		->	1 00000000		BAD
								// 0x00 + 1		->	0 00000001
								// 0x00 + 0xFF	->	0 11111111		BAD
								// 0xFF + 0xFF	->	1 11111110
				a^ShotVelB_R,x	// MSB	->	0:good	1:bad
				<0{ y=0 }
			}
			ShotPosB,x=y
			x++
			x?[MISSILE_COUNT-1]
		}<

		// shoot
		a=0
		ShotPosA=a
		ShotPosB+[MISSILE_COUNT-1]=a
		ShotVelA_W=a
		ShotVelB_W+[MISSILE_COUNT-1]=a

		a=inpt4 >=0 {
			// Compute shot position/velocity
			a=P1Frame c+ a-[FRAME_CLAMP/2] >=0{
				a>> a>> a>>
			}else{
				a>> a>> a>>
				a|0xE0
			}
			ShotVelB_W+[MISSILE_COUNT-1]=tmp1=a
			a<< c- a+tmp1
			c- a+P1X					// Acc = P1X + tmp1
			y=a a>>> a^tmp1 <0{ y=0 }	// if overflow - don't shoot
			ShotPosB+[MISSILE_COUNT-1]=y
		}
		a=inpt5 >=0 {
			// Compute shot position/velocity
			a=P2Frame c+ a-[FRAME_CLAMP/2] >=0{
				a>> a>> a>>
			}else{
				a>> a>> a>>
				a|0xE0
			}
			ShotVelA_W=tmp1=a
			a<< c- a+tmp1
			c- a+P2X					// Acc = P2X + tmp1
			y=a a>>> a^tmp1 <0{ y=0 }	// if overflow - don't shoot
			ShotPosA=y
		}


		x=0
		far kernel_terror_setup

	sync3
	
		// KERNEL 1A
		far kernel_terror
		cpf=a=0
		cbg=a
		cp0=a=0x6F
		cp1=a=0xDF
		pf0=pf1=pf2=a=0xFF

		a=P1Frame a&0xF0
		ptrA=a
		ptrA+1=a=&>sprite
		a=P2Frame a&0xF0
		ptrB=a
		ptrB+1=a=&>sprite


		// KERNEL 2A
		a=Player1Immunity_R a&7 x=a a=ImmShake,x c- a+P1X
		wsync gp0=y=0 c+ hmclr=a { a-30 }>= a<< a<< a<< a^0x70 hp0=a rp0=a
		wsync hmove=a
		tmp1=a=[MISSILE_COUNT-1]
		CXCLR=a
		y=15 {
			a=PlayCol0,y 
			a^Player1Immunity_R
			cp0=a
			tmp2=a=(ptrA),y y--				// X = player graphics
			x=tmp1 a=ShotPosA,x	tmp1--		// A = shot position
			x=tmp2

			c+ hmclr=a
			wsync gp0=x gp1=x=0 x=a { a-30 }>= a<< a<< a<< a^0x70 hp1=a rp1=a
			wsync hmove=a a=x !={ a=0x08 } gp1=a		gp0=a=(ptrA),y y--  a=PlayCol0,y a^Player1Immunity_R cp0=a
			wsync gp0=a=(ptrA),y y--
			wsync gp0=a=(ptrA),y y--
		}>=0
		a=CXPPMM <0 {  
			ShotPosA+[MISSILE_COUNT-1]=ShotPosA+[MISSILE_COUNT-2]=ShotPosA+[MISSILE_COUNT-3]=ShotPosA+[MISSILE_COUNT-4]=a=0	
			x=Player1Energy_R x++ x++ x++ x++ Player1Energy_W=x
		}
	
		// KERNEL 3
		x=[MISSILE_COUNT-4]
		nocross {		//	MISSILE_COUNT-4 .. 1
		.loop:
			a=ShotPosA-1,x 
			wsync gp1=y=0 y=a hmclr=a { a-30 }>= a<< a<< a<< a^0x70 hp1=a rp1=a a=y
			wsync hmove=a !={ a=0x08 } gp1=a
			cbg=a=SkyColors,x
			pf0=a=SkyScraper0,x
			pf1=a=SkyScraper1,x
			pf2=a=SkyScraper2,x

	
			a=ShotPosB+[4-1],x		// last shot in this kernel:	4-1+1 = 4
			wsync gp0=y=0 *2 hmclr=a { a-30 }>= a<< a<< a<< a^0x70 hp0=a rp0=a
			wsync hmove=a a=ShotPosB+[4-1],x !={ a=0x08 } gp0=a
			cp0=a=0x6F
			x--
			== goto .endloop
			goto .loop
		.endloop:
		}
		a=Player2Immunity_R a&7 x=a a=ImmShake,x c- a+P2X
		wsync gp1=y=0 c+ hmclr=a { a-30 }>= a<< a<< a<< a^0x70 hp1=a rp1=a
		wsync hmove=a pf0=pf1=pf2=a=0
		cbg=a

		// KERNEL 2B
		tmp1=a=3
		CXCLR=a
		y=0 {
			a=PlayCol1,y
			a^Player2Immunity_R
			cp1=a
			tmp2=a=(ptrB),y y++				// X = player graphics
			x=tmp1 a=ShotPosB,x	tmp1--		// A = shot position
			x=tmp2

			c+ hmclr=a
			wsync gp1=x gp0=x=0 x=a { a-30 }>= a<< a<< a<< a^0x70 hp0=a rp0=a
			wsync hmove=a a=x !={ a=0x08 } gp0=a			gp1=a=(ptrB),y y++		a=PlayCol1,y a^Player2Immunity_R cp1=a
			wsync gp1=a=(ptrB),y y++
			wsync gp1=a=(ptrB),y y++
			y?16
		}<
		a=CXPPMM <0 {  
			ShotPosB=ShotPosB+1=ShotPosB+2=ShotPosB+3=a=0 
			x=Player2Energy_R x++ x++ x++ x++ Player2Energy_W=x
		}
		a=0
		gp0=gp1=a

		// KERNEL 1B
		x=1
		far kernel_terror_setup
		far kernel_terror


	} always	// loop forever
}
