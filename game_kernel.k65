data TestSine {
	align 256
	for x=0..255 eval [ p = x/256*5, (sin(p*2*pi)*0.5+0.5)*254+1 ]
}

data TestSine2 {
	align 256
	for x=0..255 eval [ p = x/256*7, (sin(p*2*pi)*0.5+0.5)*156+1 ]
}




func game_kernel {

	{
	sync1
		anim++
		player1_input
		player2_input

		// move A
		x=[MISSILE_COUNT-1] {
			ShotVelA_W,x=a=ShotVelA_R-1,x
			y=a=ShotPosA-1,x
			!={
				c- a+ShotVelA_R,x
				y=a
				a>>>			// 0xFF + 1		->	1 00000000		BAD
								// 0x00 + 1		->	0 00000001
								// 0x00 + 0xFF	->	0 11111111		BAD
								// 0xFF + 0xFF	->	1 11111110
				a^ShotVelA_R,x	// MSB	->	0:good	1:bad
				<0{ y=0 }
			}
			ShotPosA,x=y
			x--
		}!=

	sync2

		// move B
		x=0{
			ShotVelB_W,x=a=ShotVelB_R+1,x
			y=a=ShotPosB+1,x
			!={
				c- a+ShotVelB_R,x
				y=a
				a>>>			// 0xFF + 1		->	1 00000000		BAD
								// 0x00 + 1		->	0 00000001
								// 0x00 + 0xFF	->	0 11111111		BAD
								// 0xFF + 0xFF	->	1 11111110
				a^ShotVelB_R,x	// MSB	->	0:good	1:bad
				<0{ y=0 }
			}
			ShotPosB,x=y
			x++
			x?[MISSILE_COUNT-1]
		}<

		// shoot
		a=swchb a&0x08
		!= {
			a=0
			ShotPosA=a
			ShotPosB+[MISSILE_COUNT-1]=a
			ShotVelA_W=a
			ShotVelB_W+[MISSILE_COUNT-1]=a

			a=inpt4 >=0 {
				// Compute shot position/velocity
				a=P1Frame c+ a-[FRAME_CLAMP/2] >=0{
					a>> a>> a>>
				}else{
					a>> a>> a>>
					a|0xE0
				}
				ShotVelB_W+[MISSILE_COUNT-1]=tmp1=a
				a<< c- a+tmp1 c- a+P1X					// Acc = P1X + 3*tmp1
				ShotPosB+[MISSILE_COUNT-1]=a
			}
			a=inpt5 >=0 {
				// Compute shot position/velocity
				a=P2Frame c+ a-[FRAME_CLAMP/2] >=0{
					a>> a>> a>>
				}else{
					a>> a>> a>>
					a|0xE0
				}
				ShotVelA_W=tmp1=a
				a<< c- a+tmp1 c- a+P2X					// Acc = P2X + 3*tmp1
				ShotPosA=a
			}
		} 
		else { 
			y=anim	
			ShotPosA=a=TestSine,y
			ShotPosB+[MISSILE_COUNT-1]=a=TestSine2,y
		}


	
		a=P1Frame a&0xF0
		ptrA=a
		ptrA+1=a=&>sprite
		a=P2Frame a&0xF0
		ptrB=a
		ptrB+1=a=&>sprite
	sync3
	
		// KERNEL 1A
		kernel_terror1
		ns0=ns1=a=0
		cp0=a=0x3F
		cp1=a=0x4F

		// KERNEL 2A
		a=P1X
		wsync gp0=y=0 c+ hmclr=a { a-30 }>= a<< a<< a<< a^0x70 hp0=a rp0=a
		wsync hmove=a
		tmp1=a=[MISSILE_COUNT-1]
		y=15 {
			tmp2=a=(ptrA),y y--				// X = player graphics
			x=tmp1 a=ShotPosA,x	tmp1--		// A = shot position
			x=tmp2

			c+ hmclr=a
			wsync gp0=x gp1=x=0 x=a { a-30 }>= a<< a<< a<< a^0x70 hp1=a rp1=a
			wsync hmove=a a=x !={ a=0x08 } gp1=a		gp0=a=(ptrA),y y--
			wsync gp0=a=(ptrA),y y--
			wsync gp0=a=(ptrA),y y--
		}>=0

		// KERNEL 3
		x=[MISSILE_COUNT-4]
		nocross {
		.loop:
			a=ShotPosA-1,x
			wsync gp1=y=0 *2 hmclr=a { a-30 }>= a<< a<< a<< a^0x70 hp1=a rp1=a
			wsync hmove=a a=ShotPosA-1,x !={ a=0x08 } gp1=a
	
			a=ShotPosB+[4-1],x		// last shot in this kernel:	4-1+1 = 4
			wsync gp0=y=0 *2 hmclr=a { a-30 }>= a<< a<< a<< a^0x70 hp0=a rp0=a
			wsync hmove=a a=ShotPosB+[4-1],x !={ a=0x08 } gp0=a
			x--
			== goto .endloop
			goto .loop
		.endloop:
		}
		a=P2X
		wsync gp1=y=0 c+ hmclr=a { a-30 }>= a<< a<< a<< a^0x70 hp1=a rp1=a
		wsync hmove=a

		// KERNEL 2B
		tmp1=a=3
		y=0 {
			tmp2=a=(ptrB),y y++				// X = player graphics
			x=tmp1 a=ShotPosB,x	tmp1--		// A = shot position
			x=tmp2

			c+ hmclr=a
			wsync gp1=x gp0=x=0 x=a { a-30 }>= a<< a<< a<< a^0x70 hp0=a rp0=a
			wsync hmove=a a=x !={ a=0x08 } gp0=a			gp1=a=(ptrB),y y++
			wsync gp1=a=(ptrB),y y++
			wsync gp1=a=(ptrB),y y++
			y?16
		}<
		a=0
		gp0=gp1=a

		// KERNEL 1B
		kernel_terror2


	} always	// loop forever
}
