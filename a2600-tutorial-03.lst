; section sprite
sprite
;  	align 256
;  	// image <file> <x0> <y0> <byte> <repeat> - gather bits from image
;  	//	<file>		- file name without ".bmp" extension
;  	//	<x0> <y0>	- first pixel to scan
;  	//	<byte>		- scanning mode for each single byte starting with MSB (count+direction)
;  	//	<repeat>	- scanning mode for consecutive bytes (count+direction)
;  
;  	image sprites  0 0 8> 16v		// start at pixel (0,0), each byte is 8 bits to the right, repeat 16 times going up
    .byte   #$3C
    .byte   #$7E
    .byte   #$FF
    .byte   #$FF
    .byte   #$DB
    .byte   #$99
    .byte   #$99
    .byte   #$FF
    .byte   #$66
    .byte   #$7E
    .byte   #$3C
    .byte   #$24
    .byte   #$5A
    .byte   #$3C
    .byte   #$00
    .byte   #$00
;  	image sprites 10 0 8> 16v		// do the same from (10,0)
    .byte   #$3C
    .byte   #$7E
    .byte   #$FF
    .byte   #$FF
    .byte   #$DB
    .byte   #$99
    .byte   #$99
    .byte   #$FF
    .byte   #$66
    .byte   #$7E
    .byte   #$3C
    .byte   #$24
    .byte   #$00
    .byte   #$5A
    .byte   #$3C
    .byte   #$00
;  	image sprites 20 0 8> 16v		// and again starting at (20,0)
    .byte   #$3C
    .byte   #$7E
    .byte   #$FF
    .byte   #$FF
    .byte   #$DB
    .byte   #$99
    .byte   #$99
    .byte   #$FF
    .byte   #$66
    .byte   #$7E
    .byte   #$3C
    .byte   #$24
    .byte   #$00
    .byte   #$00
    .byte   #$5A
    .byte   #$3C
;  }
;  
; section SineX
SineX
;  	align 256
;  	0
;  	for x=0..213 eval [ (sin(x/212*pi*2)*.499+.499)*130 ]
    .byte     #$00
    .byte   #$41
    .byte   #$43
    .byte   #$45
    .byte   #$47
    .byte   #$49
    .byte   #$4A
    .byte   #$4C
    .byte   #$4E
    .byte   #$50
    .byte   #$52
    .byte   #$54
    .byte   #$56
    .byte   #$57
    .byte   #$59
    .byte   #$5B
    .byte   #$5D
    .byte   #$5E
    .byte   #$60
    .byte   #$62
    .byte   #$63
    .byte   #$65
    .byte   #$67
    .byte   #$68
    .byte   #$6A
    .byte   #$6B
    .byte   #$6D
    .byte   #$6E
    .byte   #$6F
    .byte   #$71
    .byte   #$72
    .byte   #$73
    .byte   #$74
    .byte   #$76
    .byte   #$77
    .byte   #$78
    .byte   #$79
    .byte   #$7A
    .byte   #$7B
    .byte   #$7B
    .byte   #$7C
    .byte   #$7D
    .byte   #$7E
    .byte   #$7E
    .byte   #$7F
    .byte   #$7F
    .byte   #$80
    .byte   #$80
    .byte   #$81
    .byte   #$81
    .byte   #$81
    .byte   #$81
    .byte   #$82
    .byte   #$82
    .byte   #$82
    .byte   #$82
    .byte   #$82
    .byte   #$81
    .byte   #$81
    .byte   #$81
    .byte   #$81
    .byte   #$80
    .byte   #$80
    .byte   #$7F
    .byte   #$7F
    .byte   #$7E
    .byte   #$7E
    .byte   #$7D
    .byte   #$7C
    .byte   #$7B
    .byte   #$7B
    .byte   #$7A
    .byte   #$79
    .byte   #$78
    .byte   #$77
    .byte   #$76
    .byte   #$74
    .byte   #$73
    .byte   #$72
    .byte   #$71
    .byte   #$6F
    .byte   #$6E
    .byte   #$6D
    .byte   #$6B
    .byte   #$6A
    .byte   #$68
    .byte   #$67
    .byte   #$65
    .byte   #$63
    .byte   #$62
    .byte   #$60
    .byte   #$5E
    .byte   #$5D
    .byte   #$5B
    .byte   #$59
    .byte   #$57
    .byte   #$56
    .byte   #$54
    .byte   #$52
    .byte   #$50
    .byte   #$4E
    .byte   #$4C
    .byte   #$4A
    .byte   #$49
    .byte   #$47
    .byte   #$45
    .byte   #$43
    .byte   #$41
    .byte   #$3F
    .byte   #$3D
    .byte   #$3B
    .byte   #$39
    .byte   #$37
    .byte   #$35
    .byte   #$34
    .byte   #$32
    .byte   #$30
    .byte   #$2E
    .byte   #$2C
    .byte   #$2A
    .byte   #$28
    .byte   #$27
    .byte   #$25
    .byte   #$23
    .byte   #$22
    .byte   #$20
    .byte   #$1E
    .byte   #$1D
    .byte   #$1B
    .byte   #$1A
    .byte   #$18
    .byte   #$17
    .byte   #$15
    .byte   #$14
    .byte   #$12
    .byte   #$11
    .byte   #$10
    .byte   #$0E
    .byte   #$0D
    .byte   #$0C
    .byte   #$0B
    .byte   #$0A
    .byte   #$09
    .byte   #$08
    .byte   #$07
    .byte   #$06
    .byte   #$06
    .byte   #$05
    .byte   #$04
    .byte   #$03
    .byte   #$03
    .byte   #$02
    .byte   #$02
    .byte   #$01
    .byte   #$01
    .byte   #$01
    .byte   #$00
    .byte   #$00
    .byte   #$00
    .byte   #$00
    .byte   #$00
    .byte   #$00
    .byte   #$00
    .byte   #$00
    .byte   #$00
    .byte   #$01
    .byte   #$01
    .byte   #$01
    .byte   #$02
    .byte   #$02
    .byte   #$03
    .byte   #$03
    .byte   #$04
    .byte   #$05
    .byte   #$06
    .byte   #$06
    .byte   #$07
    .byte   #$08
    .byte   #$09
    .byte   #$0A
    .byte   #$0B
    .byte   #$0C
    .byte   #$0D
    .byte   #$0E
    .byte   #$10
    .byte   #$11
    .byte   #$12
    .byte   #$14
    .byte   #$15
    .byte   #$17
    .byte   #$18
    .byte   #$1A
    .byte   #$1B
    .byte   #$1D
    .byte   #$1E
    .byte   #$20
    .byte   #$22
    .byte   #$23
    .byte   #$25
    .byte   #$27
    .byte   #$28
    .byte   #$2A
    .byte   #$2C
    .byte   #$2E
    .byte   #$30
    .byte   #$32
    .byte   #$34
    .byte   #$35
    .byte   #$37
    .byte   #$39
    .byte   #$3B
    .byte   #$3D
    .byte   #$3F
    .byte   #$41
    .byte   #$43
;  }
;  
; section SineY
SineY
;  	align 256
;  	0
;  	for x=0..255 eval [ (sin(x/256*pi*2)*.499+.499)*180+1 ]
    .byte     #$00
    .byte   #$5B
    .byte   #$5D
    .byte   #$5F
    .byte   #$61
    .byte   #$64
    .byte   #$66
    .byte   #$68
    .byte   #$6A
    .byte   #$6C
    .byte   #$6E
    .byte   #$71
    .byte   #$73
    .byte   #$75
    .byte   #$77
    .byte   #$79
    .byte   #$7B
    .byte   #$7D
    .byte   #$7F
    .byte   #$81
    .byte   #$83
    .byte   #$85
    .byte   #$87
    .byte   #$89
    .byte   #$8B
    .byte   #$8D
    .byte   #$8F
    .byte   #$90
    .byte   #$92
    .byte   #$94
    .byte   #$95
    .byte   #$97
    .byte   #$99
    .byte   #$9A
    .byte   #$9C
    .byte   #$9D
    .byte   #$9F
    .byte   #$A0
    .byte   #$A2
    .byte   #$A3
    .byte   #$A4
    .byte   #$A6
    .byte   #$A7
    .byte   #$A8
    .byte   #$A9
    .byte   #$AA
    .byte   #$AB
    .byte   #$AC
    .byte   #$AD
    .byte   #$AE
    .byte   #$AF
    .byte   #$AF
    .byte   #$B0
    .byte   #$B1
    .byte   #$B1
    .byte   #$B2
    .byte   #$B2
    .byte   #$B3
    .byte   #$B3
    .byte   #$B4
    .byte   #$B4
    .byte   #$B4
    .byte   #$B4
    .byte   #$B5
    .byte   #$B5
    .byte   #$B5
    .byte   #$B5
    .byte   #$B5
    .byte   #$B4
    .byte   #$B4
    .byte   #$B4
    .byte   #$B4
    .byte   #$B3
    .byte   #$B3
    .byte   #$B2
    .byte   #$B2
    .byte   #$B1
    .byte   #$B1
    .byte   #$B0
    .byte   #$AF
    .byte   #$AF
    .byte   #$AE
    .byte   #$AD
    .byte   #$AC
    .byte   #$AB
    .byte   #$AA
    .byte   #$A9
    .byte   #$A8
    .byte   #$A7
    .byte   #$A6
    .byte   #$A4
    .byte   #$A3
    .byte   #$A2
    .byte   #$A0
    .byte   #$9F
    .byte   #$9D
    .byte   #$9C
    .byte   #$9A
    .byte   #$99
    .byte   #$97
    .byte   #$95
    .byte   #$94
    .byte   #$92
    .byte   #$90
    .byte   #$8F
    .byte   #$8D
    .byte   #$8B
    .byte   #$89
    .byte   #$87
    .byte   #$85
    .byte   #$83
    .byte   #$81
    .byte   #$7F
    .byte   #$7D
    .byte   #$7B
    .byte   #$79
    .byte   #$77
    .byte   #$75
    .byte   #$73
    .byte   #$71
    .byte   #$6E
    .byte   #$6C
    .byte   #$6A
    .byte   #$68
    .byte   #$66
    .byte   #$64
    .byte   #$61
    .byte   #$5F
    .byte   #$5D
    .byte   #$5B
    .byte   #$59
    .byte   #$56
    .byte   #$54
    .byte   #$52
    .byte   #$50
    .byte   #$4E
    .byte   #$4B
    .byte   #$49
    .byte   #$47
    .byte   #$45
    .byte   #$43
    .byte   #$41
    .byte   #$3F
    .byte   #$3D
    .byte   #$3A
    .byte   #$38
    .byte   #$36
    .byte   #$34
    .byte   #$32
    .byte   #$30
    .byte   #$2F
    .byte   #$2D
    .byte   #$2B
    .byte   #$29
    .byte   #$27
    .byte   #$25
    .byte   #$24
    .byte   #$22
    .byte   #$20
    .byte   #$1F
    .byte   #$1D
    .byte   #$1B
    .byte   #$1A
    .byte   #$18
    .byte   #$17
    .byte   #$15
    .byte   #$14
    .byte   #$13
    .byte   #$11
    .byte   #$10
    .byte   #$0F
    .byte   #$0E
    .byte   #$0D
    .byte   #$0C
    .byte   #$0B
    .byte   #$0A
    .byte   #$09
    .byte   #$08
    .byte   #$07
    .byte   #$06
    .byte   #$06
    .byte   #$05
    .byte   #$04
    .byte   #$04
    .byte   #$03
    .byte   #$03
    .byte   #$02
    .byte   #$02
    .byte   #$02
    .byte   #$01
    .byte   #$01
    .byte   #$01
    .byte   #$01
    .byte   #$01
    .byte   #$01
    .byte   #$01
    .byte   #$01
    .byte   #$01
    .byte   #$02
    .byte   #$02
    .byte   #$02
    .byte   #$03
    .byte   #$03
    .byte   #$04
    .byte   #$04
    .byte   #$05
    .byte   #$06
    .byte   #$06
    .byte   #$07
    .byte   #$08
    .byte   #$09
    .byte   #$0A
    .byte   #$0B
    .byte   #$0C
    .byte   #$0D
    .byte   #$0E
    .byte   #$0F
    .byte   #$10
    .byte   #$11
    .byte   #$13
    .byte   #$14
    .byte   #$15
    .byte   #$17
    .byte   #$18
    .byte   #$1A
    .byte   #$1B
    .byte   #$1D
    .byte   #$1F
    .byte   #$20
    .byte   #$22
    .byte   #$24
    .byte   #$25
    .byte   #$27
    .byte   #$29
    .byte   #$2B
    .byte   #$2D
    .byte   #$2F
    .byte   #$30
    .byte   #$32
    .byte   #$34
    .byte   #$36
    .byte   #$38
    .byte   #$3A
    .byte   #$3D
    .byte   #$3F
    .byte   #$41
    .byte   #$43
    .byte   #$45
    .byte   #$47
    .byte   #$49
    .byte   #$4B
    .byte   #$4E
    .byte   #$50
    .byte   #$52
    .byte   #$54
    .byte   #$56
    .byte   #$59
;  }
;  
; section main
main
	; inlined init
    SEi
    CLd
    LDX     #$FF
    TXS
    LDA     #$00
__I10__label_1
    STA     zeropage,X
    DEX
	BNE	__I10__label_1
	; end of inlined init
;  	init
;  	cntX=a=1
    LDA     #$01
    STA     cntX
;  
;  	{
;  		sync1
__label_3
;  		sync2
	; inlined sync1
__I11__I1__label_2
    LDA     INTIM
	BNE	__I11__I1__label_2
    STA     WSYNC
    LDA     #$02
    STA     VBLANK
    LDA     #$28
    STA     TIM64T
	; end of inlined sync1
;  		sync3
	; inlined sync2
__I12__I3__label_2
    LDA     INTIM
	BNE	__I12__I3__label_2
    STA     WSYNC
    LDA     #$02
    STA     VSYNC
    STA     WSYNC
    STA     WSYNC
    LDA     #$00
    STA     WSYNC
    STA     VSYNC
    LDA     #$36
    STA     TIM64T
	; end of inlined sync2
;  
	; inlined sync3
__I13__I8__label_2
    LDA     INTIM
	BNE	__I13__I8__label_2
    STA     WSYNC
    LDA     #$00
    STA     VBLANK
    LDA     #$12
    STA     T1024T
	; end of inlined sync3
;  		// compute sprite frame and data start
;  		a=anim a<< a&0x30	// LDA+ASL+AND - you can write everything in single line, too
    LDA     anim
    ASL
    AND     #$30
;  		a?0x30				// CMP
    CMP     #$30
;  		=={ a=0x10 }		// if zero/equal (uses BNE)
    BNE     __label_4
    LDA     #$10
__label_4
;  		y=a
    TAY
;  
;  		// position sprite in X axis
;  		x=cntX
    LDX     cntX
;  		a=SineX,x
    LDA     SineX,X
;  		nocross {	// make sure following code doesn't cross page boundary
__label_5
;  			wsync
;  			 { a-15 }>=0
	; inlined wsync
    STA     WSYNC
	; end of inlined wsync
__label_6
    SBC     #$0F
    BPL     __label_6
;  			  a<< a<< a<< a<< a^0x70 // XOR
    ASL
    ASL
    ASL
    ASL
    EOR     #$70
;  			  hp0=a
    STA     hp0
;  			  *5 
    NOP     $80
    NOP
;  			  rp0=a		// sprite position trick
    STA     rp0
;  		}
;  		wsync hmove=a
	; inlined wsync
    STA     WSYNC
	; end of inlined wsync
    STA     hmove
;  
;  		// ...and in Y axis
;  		x=cntY
    LDX     cntY
;  		a=SineY,x
    LDA     SineY,X
;  		x=a
    TAX
;  		{ wsync x-- }!=		// one-liners rulez ;)
__label_7
	; inlined wsync
    STA     WSYNC
	; end of inlined wsync
    DEX
    BNE     __label_7
;  
;  
;  		// draw sprite
;  		x=16
    LDX     #$10
;  		cp0=a=0x0F
    LDA     #$0F
    STA     cp0
;  		ns0=a=5		// double size
    LDA     #$05
    STA     ns0
;  		{
;  			wsync
__label_8
;  			gp0=a=sprite,y
	; inlined wsync
    STA     WSYNC
	; end of inlined wsync
    LDA     sprite,Y
    STA     gp0
;  			wsync
;  			y++
	; inlined wsync
    STA     WSYNC
	; end of inlined wsync
    INY
;  			x--
    DEX
;  		}!=
    BNE     __label_8
;  		wsync
;  		gp0=a=0
	; inlined wsync
    STA     WSYNC
	; end of inlined wsync
    LDA     #$00
    STA     gp0
;  
;  		// animate
;  		anim++
    INC     anim
;  		cntX-- =={ cntX=a=213 }
    DEC     cntX
    BNE     __label_9
    LDA     #$D5
    STA     cntX
;  		cntY--
__label_9
    DEC     cntY
;  
;  	} always	// loop forever
    JMP     __label_3
;  }
;  
; section __vectors
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
    NOP
; section __entry
__entry
    BIT     __banksel_core
    JMP     main
